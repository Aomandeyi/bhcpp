#include <iostream>
#include <list> 
#include <vector>
#include <string>
#include <algorithm>

using namespace std;

//学生
struct Student 
{
  unsigned int number; //学号
  string name;
};

//成绩
struct Score
{
   unsigned int number; //学号
   float mark; //分数
};

//学生成绩管理类
struct StudentScoreManager
{
public:
    void InputStudents(); 
    void InputScores();
    void OutputScores() const;
    
private:
    vector<Student> students;
    list<Score> scores;
};

void StudentScoreManager::InputStudents()
{
    unsigned int number = 1; //学号从1开始
    
    while(true)
    {
        cout << "请输入" << number << "号学生姓名(输入x表示结束)：";
        
        string name;
        
        getline(cin, name);
        
        if (name == "x")
        {
            break;
        }
        
        Student student;
        student.number = number;
        student.name = name;
        
        students.push_back(student);
        
        ++number;
    }
}

struct Compare
{
   int number; //学号
   /*
    比较方法，
    cfEqual: 比较当前学号是否等于指定学号
    cfBigger:比较当前学号是否大于指定学号
   */
   enum CompareFlag { cfEqual, cfBigger };
   CompareFlag flag;
   
   bool operator () (int current_number) const
   {
       if (flag == cfEqual)
       {
           return current_number == number;
       }
       else // flag == cfBigger
       {
           return current_number > number;
       }
   }
};

list<int>::iterator  find (list<Score> scores, Compare cmp)
{
   for (list<Score>::iterator iter = scores.begin(); 
            iter != scores.end(); 
            ++iter)
        {
            if (cmp (iter->number))
            {
                return iter;
            }
        }
     //没找到,返回endl()
     return scores.endl();
} 


void StudentScoreManager::InputScores()
{
    while(true)
    {
        unsigned int number;
        
        cout << "请输入学号（输入0表示结束）：";
        
        cin >> number;
        
        if (number == 0)
        {
            break;
        }
        
        //简单判断学号是否正确：        
        if (number > students.size())
        {
            cout << "错误：学号必须位于: 1 ~ " << students.size() << " 之间。" << endl;
            continue; 
        }
        
        float mark;
        cout << "请输入该学员成绩：";
        cin >> mark;
        
        Score score;
        score.number = number;
        score.mark = mark;
        
        //在已录入的成绩中，找到第一个比number大的学号，
        //在其位置上插入新成绩
        Compare cmp;
        cmp.number = number;
        cmp.flag = Compare::cfBigger;
        
        list<Score>::iterator iter = find_if(scores.begin(), scores.end(), cmp);
        
        if (iter != scores.end())
        {
            scores.insert(iter, score);
        }
        else
        {
            //如果没有找到比number大的，
            //说明number就是最大的学号，追加到最后:
            scores.push_back(score);
        }
    }
}

struct FindScoreNumberBigger
{
    unsigned int number;
    
    bool operator() (Score const & score) const
    {
        return score.number > number;
    }
};
/*
void StudentScoreManager::InputScores2()
{
    while(true)
    {
        unsigned int number;
        
        cout << "请输入学号（输入0表示结束）：";
        
        cin >> number;
        
        if (number == 0)
        {
            break;
        }
        
        //简单判断学号是否正确：        
        if (number > students.size())
        {
            cout << "错误：学号必须位于: 1 ~ " << students.size() << " 之间。" << endl;
            continue; 
        }
        
        float mark;
        cout << "请输入该学员成绩：";
        cin >> mark;
        
        Score score;
        score.number = number;
        score.mark = mark;
        
        //在已录入的成绩中，找到第一个比number大的学号，
        //在其位置上插入新成绩
        
        FindScoreNumberBigger fsnb;
        fsnb.number = number;
        list<Score>::iterator iter = find_if(scores.begin(), scores.end(), fsnb);
        
        if (iter != scores.end())
        {
            scores.insert(iter, score);
        }
        else
        {
            //如果没有找到比number大的，
            //说明number就是最大的学号，追加到最后:
            scores.push_back(score);
        }
    }
}
*/

struct FindScoreByNumber
{
    unsigned int number;
    
    bool operator() (Score const & score) const
    {
        return score.number == number;
    }
};


void StudentScoreManager::OutputScores() const
{
    for (unsigned int i=0; i<students.size(); ++i)
    {
        unsigned int number = students[i].number; //学号

        cout << "学号：" << number << endl;
        cout << "姓名：" << students[i].name << endl;
                
        //查找成绩:
        FindScoreByNumber fbn;
        fbn.number = number;
        list<Score>::const_iterator iter = find_if(scores.begin(), scores.end(), fbn);
        
        if (iter != scores.end())
        {
            cout << "成绩：" << iter->mark << endl;
        }
        else //没找到
        {
             cout << "成绩：" << "查无成绩。" << endl;
        }
    }
}

int main()
{
    StudentScoreManager ssm;
    
    ssm.InputStudents();
    ssm.InputScores();
    ssm.OutputScores();
    
    return 0;
}
